name: CICD

# spell-checker:ignore (acronyms) CICD MSVC musl
# spell-checker:ignore (env/flags) Awarnings Ccodegen Coverflow Cpanic RUSTDOCFLAGS RUSTFLAGS Zpanic
# spell-checker:ignore (jargon) SHAs deps softprops toolchain
# spell-checker:ignore (names) CodeCOV MacOS MinGW Peltoche rivy
# spell-checker:ignore (shell/tools) choco clippy dmake dpkg esac fakeroot gmake grcov halium lcov libssl mkdir popd printf pushd rustc rustfmt rustup shopt xargs
# spell-checker:ignore (misc) aarch alnum armhf bindir busytest coreutils gnueabihf issuecomment maint nullglob onexitbegin onexitend runtest tempfile testsuite uutils

env:
  PROJECT_NAME: dxx
  PROJECT_DESC: "Enhanced Deno commands"
  PROJECT_AUTH: "rivy"
  DENO_MIN_VER: "1.0.0"

on: [push, pull_request]

jobs:
  code_deps:
    name: Style/dependencies
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: ubuntu-latest }
    steps:
      - uses: actions/checkout@v2
      - name: Initialize workflow variables
        id: vars
        shell: bash
        run: |
          ## VARs setup
          outputs() { step_id="vars"; for var in "$@" ; do echo steps.${step_id}.outputs.${var}="${!var}"; echo ::set-output name=${var}::${!var}; done; }
          # ...
      - name: Install `deno` toolchain
        uses: denoland/setup-deno@v1
      - name: "`deno cache` testing"
        shell: bash
        run: |
          ## `deno cache` testing
          # * src files to test (shell-quoted)
          files=(./src/*.ts)
          for file in "${files[@]}"; do
            # * convert any warnings to GHA UI annotations; ref: <https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-a-warning-message>
            # * note: `perl -ne 's/\x1b\[[0-9;]*[A-Za-z]//gim; print'` removes ANSI escapes; ref: <https://stackoverflow.com/questions/17998978/removing-colors-from-output>
            S=$(deno cache "${file}" 2>&1) && printf "%s\n" "$S" || { printf "%s\n" "$S" ; printf "%s\n" "$S" | perl -ne 's/\x1b\[[0-9;]*[A-Za-z]//gim; print' | sed -E -n -e '/^error:/{' -e "N; s/^error:[[:space:]]+(.*)\n[[:space:]]+at file:[/][/]${PWD////\\/}[/](.*):([0-9]+):([0-9]+).*$/::error file=\2,line=\3::ERROR: \`deno cache\`: dependency missing (file:'\2', line:\3)/p" -e '}' ; exit 1 ; }
          done

  code_format:
    name: Style/format
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: ubuntu-latest }
    steps:
      - uses: actions/checkout@v2
      # - uses: dprint/check@v1.5
      # or, ...
      - name: Install `dprint`
        shell: bash
        run: |
          curl -fsSL https://dprint.dev/install.sh | sh -s 0.15.0 > /dev/null 2>&1
          echo '/home/runner/.dprint/bin' >> $GITHUB_PATH
      - name: Format testing (`dprint check`)
        shell: bash
        run: |
          # Format testing (`dprint check`)
          # * convert any warnings to GHA UI annotations; ref: <https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-a-warning-message>
          # * note: `perl -ne 's/\x1b\[[0-9;]*[A-Za-z]//gim; print'` removes ANSI escapes; ref: <https://stackoverflow.com/questions/17998978/removing-colors-from-output>
          S=$(dprint check 2>&1) && printf "%s\n" "$S" || { printf "%s\n" "$S" | perl -ne 's/\x1b\[[0-9;]*[A-Za-z]//gim; print' | perl -ne 'BEGIN { $errs = q//; }; print; if (m/^Error\s+formatting\s+\Q$ENV{PWD}\E\/(.*).\s+Message/) { $errs .= qq{::error file=$1::ERROR: \`dprint check\`: formatting error (file:\x27$1\x27; correct the syntax error)\n}; $file = q{}; } ; $file = $1 if /^from\s+\Q$ENV{PWD}\E\/(.*):\s*$/; ($errs .= qq{::error file=$file,line=$1::ERROR: \`dprint check\`: style violation (file:\x27$file\x27, line:$1; use \`dprint fmt -- \x27$file\x27\`)\n}) if length($file) && m/^(\d+)\|/; END { print qq/$errs/; }' ; exit 1 ; }

  code_lint:
    name: Style/lint
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: ubuntu-latest }
          - { os: macos-latest }
          - { os: windows-latest }
    steps:
      - uses: actions/checkout@v2
      - name: Install `deno` toolchain
        uses: denoland/setup-deno@v1
      - name: "`deno lint` testing"
        shell: bash
        run: |
          ## `deno lint` lint testing
          # * convert any warnings to GHA UI annotations; ref: <https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-a-warning-message>
          # * note: `deno lint` returns UNC paths under WinOS (including Cygwin and MSys) requiring platform-specific PWD handling
          S=$(deno lint 2>&1) && printf "%s\n" "$S" || { printf "%s\n" "$S" | perl -ne 's/\x1b\[[0-9;]*[A-Za-z]//gim; print' | perl -ne 'BEGIN { $errs = q//; $_=$ENV{PWD}; if ($^O =~ m/Cygwin|MSWin32|MSys/i) { s#^/([A-Za-z])/#"//?/".uc($1).":/"#e; s#/#\\#g; } ; $PWD=$_; print qq{PWD=$PWD\n}; }; print; if (m/^Error\s+linting:\s+\Q$PWD\E[\\\/](.*)$/) { $errs .= qq{::error file=$1::ERROR: \`deno lint\`: linting error (file:\x27$1\x27; correct the syntax error)\n}; $file = q{}; } ; $error = $1 if /^([(].*)$/; ($errs .= qq{::error file=$1,line=$2::ERROR: \`deno lint\`: $error (file:\x27$1\x27, line:$2)\n}) if length($error) && m/\s*at\s+\Q$PWD\E[\\\/](.*):(\d+):\d+\s*$/; END { print qq/$errs/; }' ; exit 1 ; }

  code_spellcheck:
    name: Style/spelling
    runs-on: ${{ matrix.job.os }}
    strategy:
      matrix:
        job:
          - { os: ubuntu-latest }
    steps:
      - uses: actions/checkout@v2
      - name: Install/setup prerequisites
        shell: bash
        run: |
          ## Install/setup prerequisites
          sudo apt-get -y update ; sudo apt-get -y install npm ; sudo npm install cspell -g ;
      - name: Run `cspell`
        shell: bash
        run: |
          ## Run `cspell`
          cspell --config .vscode/cspell.json --no-summary --no-progress "**/*" ".github/**/*" | sed -E -n "s/${PWD//\//\\/}\/(.*):(.*):(.*) - (.*)/::error file=\1,line=\2,col=\3::ERROR: \4 (file:'\1', line:\2)/p"

  test:
    name: Test
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: ubuntu-latest }
          - { os: macos-latest }
          - { os: windows-latest }
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # pull full repository (enables `git` branch/describe operations and testing)
      - name: Initialize workflow variables
        id: vars
        shell: bash
        run: |
          ## VARs setup
          outputs() { step_id="vars"; for var in "$@" ; do echo steps.${step_id}.outputs.${var}="${!var}"; echo ::set-output name=${var}::${!var}; done; }
          # ...
      - name: Install `deno` toolchain
        uses: denoland/setup-deno@v1
      - name: Info
        shell: bash
        run: |
          ## Info
          # environment
          echo "## environment"
          echo "CI='${CI}'"
          # tooling info display
          echo "## tooling"
          deno --version
          # dependencies
          echo "## dependency list"
          # * src files (shell-quoted)
          files=(./src/*.ts)
          for file in "${files[@]}"; do
            deno info "${file}"
          done
      - name: "`deno test`"
        shell: bash
        run: |
          ## `deno test`
          deno test --allow-all
